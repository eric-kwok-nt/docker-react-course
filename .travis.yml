sudo: required
language: generic 
# Anytime we are making use of docker, we have to have superuser permissions in order to execute this build
services: 
  - docker # We need the docker CLI pre-installed. Travis will automatically install a copy of docker into the container.

before-install: 
  # It is going to have a series of different commands that get executed before our tests are ran.
  # It will be a series of setups that needs to occur before we start to either deploy our project or before running tests
  docker build -t xholyspirit/docker-react-course -f Dockerfile.dev .

script:
  # The script section will contain all the different commands that need to be executed to run the test suites
  # Travis CI will watch the output from each of the command, and if one of the commands returns status code other than zero,
  # Travis is going to assume that our build failed, or our test suite failed to run properly
  # Anytime that we run our test suite on Travis CI, Travis is going to assume that our test suites runs and exit automatically.
  # Need to add in a flag so that the test suite automatically exits the instance the first run is completed
  - docker run -e CI=true xholyspirit/docker-react-course npm run test 

deploy:
  provider: elasticbeanstalk
  # Travis CI comes pre-configured to deploy the application to a handful of different providers (AWS, Digital Ocean etc.)
  
  # Next, provide other options for further customization
  region: "us-west-2" # Th region setting where the app was created
  app: "Docker-react-app" # App name
  env: "Dockerreactapp-env" # Environment name
  bucket_name: "elasticbeanstalk-us-east-2-148347536296"
  # When Travis decides to deploy the code base, it is going to take all of the files inside of the github repository, zip them all 
  # up ito a single file and it is going to copy all of them over to an S3 bucket, which is essentially a hard drive running on AWS.
  # Once it copies all the files over, it is essentially going to inform Elastic beanstalk about the uploaded file for application 
  # redeployment. So in this step, we just need to find the S3 bucket that has already been created in the elastic beanstalk instance 
  bucket_path: "Docker-react-app"

  # Next we want to make sure that it does not automatically deploy our code when with push inot the feature branch, but rather only
  # deploy when the master branch gets somew new code (merge pull request)
  on:
    branch: master

  # The last thing is to add in a set of API keys to allow Travis CI to have access to our AWS account
  # DO NOT put the access keys directly in here as it will be push onto the public repository. Use a feature of environment secrets 
  # provided by Travis CI
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: "$AWS_SECRET_KEY"